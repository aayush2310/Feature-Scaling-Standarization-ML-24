import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('Social_Network_Ads.csv')
df=df.iloc[:,2:]
df.sample(5)

######TRAIN TEST SPLIT

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(df.drop('Purchased', axis=1),
                                                df['Purchased'],
                                                test_size=0.3,
                                                random_state=0)
X_train.shape,X_test.shape

########STANDARD SCALER
//There is a class in sklearn which transforms every value in the column to the new value i.e. (x(i)-mean)/SD//

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()

#fit the scaler to the train set,it will learn the parameters
scaler.fit(X_train)
#This function will calculate the mean and standard deviation the data

#transform train and test sets
X_train_scaled=scaler.transform(X_train)
X_test_scaled=scaler.transform(X_test)

scaler.mean_

//X_train was a tabular dataframe(pandas dataframe) but the scaled data is in numpy array.This is a problem.So we need to convert it into pandas dataframe.

X_train_scaled=pd.DataFrame(X_train_scaled,columns=X_train.columns)
X_test_scaled=pd.DataFrame(X_test_scaled,columns=X_test.columns)
X_train_scaled

//using describe function we can describe the data//
np.round(X_train.describe(),1)
np.round(X_train_scaled.describe(),1)

######## Effect of scaling

fig,(ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))
ax1.scatter(X_train['Age'],X_train['EstimatedSalary'])
ax1.set_title("Before Scaling")
ax2.scatter(X_train_scaled['Age'],X_train_scaled['EstimatedSalary'],color='red')
ax2.set_title("After Scaling")
plt.show()

//Shape of the data will remain same,only the data will get mean centric and the SD will go towards 1.//

######### Ploting probability density function to get the real effect of scaling

fig, (ax1,ax2) = plt.subplots(ncols=2,figsize=(12,5))

#before scaling
ax1.set_title('Before Scaling')
sns.kdeplot(X_train['Age'],ax=ax1)
sns.kdeplot(X_train['EstimatedSalary'],ax=ax1)

#after scaling
ax2.set_title('After Standard Scaling')
sns.kdeplot(X_train_scaled['Age'],ax=ax2)
sns.kdeplot(X_train_scaled['EstimatedSalary'],ax=ax2)
plt.show()


#############Comparison of Distributions
//Shape of the distribution remains same,only scale changes

/****AGE
fig,(ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

#before scaling

ax1.set_title('Age Distribution Before Scaling')
sns.kdeplot(X_train['Age'],ax=ax1)

#after scaling

ax2.set_title('Age Distribution after scaling')
sns.kdeplot(X_train_scaled['Age'],ax=ax2)
plt.show()


/******Salary
fig,(ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

#before scaling

ax1.set_title('Salary Distribution Before Scaling')
sns.kdeplot(X_train['EstimatedSalary'],ax=ax1)

#after scaling

ax2.set_title('Salary Distribution after scaling')
sns.kdeplot(X_train_scaled['EstimatedSalary'],ax=ax2)
plt.show()

